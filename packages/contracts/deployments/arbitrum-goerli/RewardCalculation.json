{
  "address": "0x89a247b3b3dC12ce5398518b6E42eD58f860A04b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract WorkerRegistration",
          "name": "_workerRegistration",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "apy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetGb",
          "type": "uint256"
        }
      ],
      "name": "currentApy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetGb",
          "type": "uint256"
        }
      ],
      "name": "epochReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workerRegistration",
      "outputs": [
        {
          "internalType": "contract WorkerRegistration",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x55afc9794656d36c690ca57653b171d01f3e1708842ac2586f84060df9d11b8f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xedFa74C6bC620CC992d4D2C9A27803748B8f5a64",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "614350",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd2bf2767ebd33c3ac1f0b7abc49d20c838d7d503c47b1cfe3c88a78f5e3c94a5",
    "transactionHash": "0x55afc9794656d36c690ca57653b171d01f3e1708842ac2586f84060df9d11b8f",
    "logs": [],
    "blockNumber": 36287973,
    "cumulativeGasUsed": "614350",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0EddCcbFFadc2101e09d6efA5E5Be2D15ee44a5B"
  ],
  "numDeployments": 2,
  "solcInputHash": "8435573c76e29e88148da4148ee5ff92",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract WorkerRegistration\",\"name\":\"_workerRegistration\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetGb\",\"type\":\"uint256\"}],\"name\":\"currentApy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetGb\",\"type\":\"uint256\"}],\"name\":\"epochReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workerRegistration\",\"outputs\":[{\"internalType\":\"contract WorkerRegistration\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RewardCalculation.sol\":\"RewardCalculation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"src/RewardCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"./WorkerRegistration.sol\\\";\\n\\ncontract RewardCalculation {\\n  WorkerRegistration public workerRegistration;\\n  uint256 year = 365 days;\\n\\n  constructor(WorkerRegistration _workerRegistration) {\\n    workerRegistration = _workerRegistration;\\n  }\\n\\n  function apy(uint256 target, uint256 actual) public pure returns (uint256) {\\n    int256 def = (int256(target) - int256(actual)) * 10000 / int256(target);\\n    if (def >= 9000) {\\n      return 7000;\\n    }\\n    if (def >= 0) {\\n      return 2500 + uint256(def) / 2;\\n    }\\n    int256 resultApy = 2000 + def / 20;\\n    if (resultApy < 0) {\\n      return 0;\\n    }\\n    return uint256(resultApy);\\n  }\\n\\n  function currentApy(uint256 targetGb) public view returns (uint256) {\\n    return apy(targetGb, workerRegistration.getActiveWorkerCount() * workerRegistration.storagePerWorkerInGb());\\n  }\\n\\n  function epochReward(uint256 targetGb) public view returns (uint256) {\\n    return currentApy(targetGb) * workerRegistration.effectiveTVL() * workerRegistration.epochLength() / year / 10000;\\n  }\\n}\\n\",\"keccak256\":\"0x24cfc628783c79ceb2307d938fa4aebda6666af84f98e0a09c9ce2c33e555c6e\",\"license\":\"MIT\"},\"src/WorkerRegistration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract WorkerRegistration {\\n  using Counters for Counters.Counter;\\n  using SafeMath for uint256;\\n\\n  //TODO update bond amount\\n  uint256 public constant BOND_AMOUNT = 100000 * 10 ** 18;\\n  // uint256 public constant EPOCH_LENGTH = 20700; // approximately 72 hours in blocks\\n  // uint256 public constant LOCK_PERIOD = EPOCH_LENGTH;\\n\\n  IERC20 public tSQD;\\n  uint256 public storagePerWorkerInGb = 1000;\\n\\n  uint128 public immutable epochLength;\\n  uint128 public immutable lockPeriod;\\n\\n  Counters.Counter private workerIdTracker;\\n\\n  struct Worker {\\n    address creator;\\n    bytes peerId;\\n    uint256 bond;\\n    // the worker is registered at the start\\n    // of the next epoch, after register() is called\\n    uint128 registeredAt;\\n    // the worker is de-registered at the start of\\n    // the next epoch, after deregister() is called\\n    uint128 deregisteredAt;\\n  }\\n\\n  mapping(uint256 => Worker) public workers;\\n  mapping(bytes peerId => uint256 id) public workerIds;\\n  mapping(address staker => mapping(uint256 workerId => uint256 amount)) public stakedAmounts;\\n  mapping(uint256 workerId => uint256 amount) public stakedAmountsPerWorker;\\n  uint256[] public activeWorkerIds;\\n  uint256 public totalStaked;\\n\\n  event WorkerRegistered(\\n    uint256 indexed workerId, bytes indexed peerId, address indexed registrar, uint256 registeredAt\\n  );\\n  event WorkerDeregistered(uint256 indexed workerId, address indexed account, uint256 deregistedAt);\\n  event WorkerWithdrawn(uint256 indexed workerId, address indexed account);\\n  event Delegated(uint256 indexed workerId, address indexed staker, uint256 amount);\\n  event Unstaked(uint256 indexed workerId, address indexed staker, uint256 amount);\\n\\n  constructor(IERC20 _tSQD, uint128 _epochLengthBlocks) {\\n    tSQD = _tSQD;\\n    epochLength = _epochLengthBlocks;\\n    lockPeriod = _epochLengthBlocks;\\n  }\\n\\n  function register(bytes calldata peerId) external {\\n    require(peerId.length <= 64, \\\"Peer ID too large\\\");\\n    require(workerIds[peerId] == 0, \\\"Worker already registered\\\");\\n\\n    workerIdTracker.increment();\\n    uint256 workerId = workerIdTracker.current();\\n\\n    workers[workerId] =\\n      Worker({creator: msg.sender, peerId: peerId, bond: BOND_AMOUNT, registeredAt: nextEpoch(), deregisteredAt: 0});\\n\\n    workerIds[peerId] = workerId;\\n    activeWorkerIds.push(workerId);\\n\\n    tSQD.transferFrom(msg.sender, address(this), BOND_AMOUNT);\\n    emit WorkerRegistered(workerId, peerId, msg.sender, workers[workerId].registeredAt);\\n  }\\n\\n  function deregister(bytes calldata peerId) external {\\n    uint256 workerId = workerIds[peerId];\\n    require(workerId != 0, \\\"Worker not registered\\\");\\n    require(isWorkerActive(workers[workerId]), \\\"Worker not active\\\");\\n    require(workers[workerId].creator == msg.sender, \\\"Not worker creator\\\");\\n\\n    workers[workerId].deregisteredAt = nextEpoch();\\n\\n    // Remove the workerId from the activeWorkerIds array\\n    for (uint256 i = 0; i < activeWorkerIds.length; i++) {\\n      if (activeWorkerIds[i] == workerId) {\\n        activeWorkerIds[i] = activeWorkerIds[activeWorkerIds.length - 1];\\n        activeWorkerIds.pop();\\n        break;\\n      }\\n    }\\n\\n    emit WorkerDeregistered(workerId, msg.sender, workers[workerId].deregisteredAt);\\n  }\\n\\n  function withdraw(bytes calldata peerId) external {\\n    uint256 workerId = workerIds[peerId];\\n    require(workerId != 0, \\\"Worker not registered\\\");\\n    Worker storage worker = workers[workerId];\\n    require(!isWorkerActive(worker), \\\"Worker is active\\\");\\n    require(worker.creator == msg.sender, \\\"Not worker creator\\\");\\n    require(block.number >= worker.deregisteredAt + lockPeriod, \\\"Worker is locked\\\");\\n\\n    uint256 bond = worker.bond;\\n    delete workers[workerId];\\n\\n    tSQD.transfer(msg.sender, bond);\\n\\n    emit WorkerWithdrawn(workerId, msg.sender);\\n  }\\n\\n  function delegate(bytes calldata peerId, uint256 amount) external {\\n    uint256 workerId = workerIds[peerId];\\n    require(workerId != 0, \\\"Worker not registered\\\");\\n    require(isWorkerActive(workers[workerId]), \\\"Worker not active\\\");\\n\\n    tSQD.transferFrom(msg.sender, address(this), amount);\\n    stakedAmounts[msg.sender][workerId] += amount;\\n    totalStaked += amount;\\n    stakedAmountsPerWorker[workerId] += amount;\\n\\n    emit Delegated(workerId, msg.sender, amount);\\n  }\\n\\n  function unstake(bytes calldata peerId, uint256 amount) external {\\n    uint256 workerId = workerIds[peerId];\\n    require(workerId != 0, \\\"Worker not registered\\\");\\n\\n    uint256 stakedAmount = stakedAmounts[msg.sender][workerId];\\n    require(stakedAmount >= amount, \\\"Insufficient staked amount\\\");\\n\\n    stakedAmounts[msg.sender][workerId] -= amount;\\n    totalStaked -= amount;\\n    stakedAmountsPerWorker[workerId] -= amount;\\n    tSQD.transfer(msg.sender, amount);\\n\\n    emit Unstaked(workerId, msg.sender, amount);\\n  }\\n\\n  function nextEpoch() public view returns (uint128) {\\n    return (uint128(block.number) / epochLength + 1) * epochLength;\\n  }\\n\\n  function getActiveWorkers() public view returns (Worker[] memory) {\\n    Worker[] memory activeWorkers = new Worker[](getActiveWorkerCount());\\n\\n    uint256 activeIndex = 0;\\n    for (uint256 i = 0; i < activeWorkerIds.length; i++) {\\n      uint256 workerId = activeWorkerIds[i];\\n      Worker storage worker = workers[workerId];\\n      if (isWorkerActive(worker)) {\\n        activeWorkers[activeIndex] = worker;\\n        activeIndex++;\\n      }\\n    }\\n\\n    return activeWorkers;\\n  }\\n\\n  function isWorkerActive(Worker storage worker) internal view returns (bool) {\\n    return worker.registeredAt <= block.number && (worker.deregisteredAt == 0 || worker.deregisteredAt >= block.number);\\n  }\\n\\n  function getActiveWorkerCount() public view returns (uint256) {\\n    uint256 activeCount = 0;\\n    for (uint256 i = 0; i < activeWorkerIds.length; i++) {\\n      uint256 workerId = activeWorkerIds[i];\\n      Worker storage worker = workers[workerId];\\n      if (isWorkerActive(worker)) {\\n        activeCount++;\\n      }\\n    }\\n    return activeCount;\\n  }\\n\\n  function getWorkerByIndex(uint256 index) external view returns (Worker memory) {\\n    require(index < activeWorkerIds.length, \\\"Index out of bounds\\\");\\n    uint256 workerId = activeWorkerIds[index];\\n    return workers[workerId];\\n  }\\n\\n  function getAllWorkersCount() external view returns (uint256) {\\n    return activeWorkerIds.length;\\n  }\\n\\n  function effectiveTVL() external view returns (uint256) {\\n    return getActiveWorkerCount() * BOND_AMOUNT + activeStake();\\n  }\\n\\n  function activeStake() public view returns (uint256) {\\n    uint256 stake = 0;\\n    // TODO optimize loop\\n    for (uint256 i = 0; i < activeWorkerIds.length; i++) {\\n      uint256 workerId = activeWorkerIds[i];\\n      Worker storage worker = workers[workerId];\\n      if (isWorkerActive(worker)) {\\n        stake += stakedAmountsPerWorker[workerId];\\n      }\\n    }\\n\\n    return stake;\\n  }\\n}\\n\",\"keccak256\":\"0x76543a616c0d752ebe05abd5b524a27eb3808d0afb692ac17d015cd705c8a3dc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526301e1338060015534801561001857600080fd5b50604051610a74380380610a74833981810160405281019061003a91906100f5565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610122565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100b082610085565b9050919050565b60006100c2826100a5565b9050919050565b6100d2816100b7565b81146100dd57600080fd5b50565b6000815190506100ef816100c9565b92915050565b60006020828403121561010b5761010a610080565b5b6000610119848285016100e0565b91505092915050565b610943806101316000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806326b470621461005157806330da52401461008157806349dead52146100b1578063d9ffb4fc146100e1575b600080fd5b61006b600480360381019061006691906104ad565b6100ff565b60405161007891906104e9565b60405180910390f35b61009b600480360381019061009691906104ad565b610239565b6040516100a891906104e9565b60405180910390f35b6100cb60048036038101906100c69190610504565b6103a9565b6040516100d891906104e9565b60405180910390f35b6100e961044e565b6040516100f691906105c3565b60405180910390f35b60006102328260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632b5d15296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610170573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019491906105f3565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e5568276040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022391906105f3565b61022d919061064f565b6103a9565b9050919050565b600061271060015460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357d775f86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d091906106d9565b6fffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c760e6b06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037191906105f3565b61037a866100ff565b610384919061064f565b61038e919061064f565b6103989190610735565b6103a29190610735565b9050919050565b6000808361271084866103bc9190610770565b6103c691906107b3565b6103d0919061082b565b905061232881126103e657611b58915050610448565b60008112610410576002816103fb9190610735565b6109c46104089190610895565b915050610448565b600060148261041f919061082b565b6107d061042c91906108c9565b9050600081121561044257600092505050610448565b80925050505b92915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b6000819050919050565b61048a81610477565b811461049557600080fd5b50565b6000813590506104a781610481565b92915050565b6000602082840312156104c3576104c2610472565b5b60006104d184828501610498565b91505092915050565b6104e381610477565b82525050565b60006020820190506104fe60008301846104da565b92915050565b6000806040838503121561051b5761051a610472565b5b600061052985828601610498565b925050602061053a85828601610498565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061058961058461057f84610544565b610564565b610544565b9050919050565b600061059b8261056e565b9050919050565b60006105ad82610590565b9050919050565b6105bd816105a2565b82525050565b60006020820190506105d860008301846105b4565b92915050565b6000815190506105ed81610481565b92915050565b60006020828403121561060957610608610472565b5b6000610617848285016105de565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061065a82610477565b915061066583610477565b925082820261067381610477565b9150828204841483151761068a57610689610620565b5b5092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6106b681610691565b81146106c157600080fd5b50565b6000815190506106d3816106ad565b92915050565b6000602082840312156106ef576106ee610472565b5b60006106fd848285016106c4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061074082610477565b915061074b83610477565b92508261075b5761075a610706565b5b828204905092915050565b6000819050919050565b600061077b82610766565b915061078683610766565b92508282039050818112600084121682821360008512151617156107ad576107ac610620565b5b92915050565b60006107be82610766565b91506107c983610766565b92508282026107d781610766565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561080f5761080e610620565b5b828205841483151761082457610823610620565b5b5092915050565b600061083682610766565b915061084183610766565b92508261085157610850610706565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561088a57610889610620565b5b828205905092915050565b60006108a082610477565b91506108ab83610477565b92508282019050808211156108c3576108c2610620565b5b92915050565b60006108d482610766565b91506108df83610766565b92508282019050828112156000831216838212600084121516171561090757610906610620565b5b9291505056fea26469706673582212204ed052f676028c5e4a6ac3b1ce79676af58df72aaac7a7d027c5cd0a95e1cfbf64736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806326b470621461005157806330da52401461008157806349dead52146100b1578063d9ffb4fc146100e1575b600080fd5b61006b600480360381019061006691906104ad565b6100ff565b60405161007891906104e9565b60405180910390f35b61009b600480360381019061009691906104ad565b610239565b6040516100a891906104e9565b60405180910390f35b6100cb60048036038101906100c69190610504565b6103a9565b6040516100d891906104e9565b60405180910390f35b6100e961044e565b6040516100f691906105c3565b60405180910390f35b60006102328260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632b5d15296040518163ffffffff1660e01b8152600401602060405180830381865afa158015610170573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061019491906105f3565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e5568276040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022391906105f3565b61022d919061064f565b6103a9565b9050919050565b600061271060015460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357d775f86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d091906106d9565b6fffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c760e6b06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561034d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037191906105f3565b61037a866100ff565b610384919061064f565b61038e919061064f565b6103989190610735565b6103a29190610735565b9050919050565b6000808361271084866103bc9190610770565b6103c691906107b3565b6103d0919061082b565b905061232881126103e657611b58915050610448565b60008112610410576002816103fb9190610735565b6109c46104089190610895565b915050610448565b600060148261041f919061082b565b6107d061042c91906108c9565b9050600081121561044257600092505050610448565b80925050505b92915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b6000819050919050565b61048a81610477565b811461049557600080fd5b50565b6000813590506104a781610481565b92915050565b6000602082840312156104c3576104c2610472565b5b60006104d184828501610498565b91505092915050565b6104e381610477565b82525050565b60006020820190506104fe60008301846104da565b92915050565b6000806040838503121561051b5761051a610472565b5b600061052985828601610498565b925050602061053a85828601610498565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061058961058461057f84610544565b610564565b610544565b9050919050565b600061059b8261056e565b9050919050565b60006105ad82610590565b9050919050565b6105bd816105a2565b82525050565b60006020820190506105d860008301846105b4565b92915050565b6000815190506105ed81610481565b92915050565b60006020828403121561060957610608610472565b5b6000610617848285016105de565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061065a82610477565b915061066583610477565b925082820261067381610477565b9150828204841483151761068a57610689610620565b5b5092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6106b681610691565b81146106c157600080fd5b50565b6000815190506106d3816106ad565b92915050565b6000602082840312156106ef576106ee610472565b5b60006106fd848285016106c4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061074082610477565b915061074b83610477565b92508261075b5761075a610706565b5b828204905092915050565b6000819050919050565b600061077b82610766565b915061078683610766565b92508282039050818112600084121682821360008512151617156107ad576107ac610620565b5b92915050565b60006107be82610766565b91506107c983610766565b92508282026107d781610766565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561080f5761080e610620565b5b828205841483151761082457610823610620565b5b5092915050565b600061083682610766565b915061084183610766565b92508261085157610850610706565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561088a57610889610620565b5b828205905092915050565b60006108a082610477565b91506108ab83610477565b92508282019050808211156108c3576108c2610620565b5b92915050565b60006108d482610766565b91506108df83610766565b92508282019050828112156000831216838212600084121516171561090757610906610620565b5b9291505056fea26469706673582212204ed052f676028c5e4a6ac3b1ce79676af58df72aaac7a7d027c5cd0a95e1cfbf64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2728,
        "contract": "src/RewardCalculation.sol:RewardCalculation",
        "label": "workerRegistration",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(WorkerRegistration)3885"
      },
      {
        "astId": 2731,
        "contract": "src/RewardCalculation.sol:RewardCalculation",
        "label": "year",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_contract(WorkerRegistration)3885": {
        "encoding": "inplace",
        "label": "contract WorkerRegistration",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}