{
  "address": "0x0EddCcbFFadc2101e09d6efA5E5Be2D15ee44a5B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tSQD",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "_epochLengthBlocks",
          "type": "uint128"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "workerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "workerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "workerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deregistedAt",
          "type": "uint256"
        }
      ],
      "name": "WorkerDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "workerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "registrar",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registeredAt",
          "type": "uint256"
        }
      ],
      "name": "WorkerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "workerId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "WorkerWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BOND_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeWorkerIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        }
      ],
      "name": "deregister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "effectiveTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveWorkerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveWorkers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "peerId",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "bond",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "registeredAt",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "deregisteredAt",
              "type": "uint128"
            }
          ],
          "internalType": "struct WorkerRegistration.Worker[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllWorkersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getWorkerByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "peerId",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "bond",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "registeredAt",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "deregisteredAt",
              "type": "uint128"
            }
          ],
          "internalType": "struct WorkerRegistration.Worker",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockPeriod",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpoch",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "workerId",
          "type": "uint256"
        }
      ],
      "name": "stakedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "workerId",
          "type": "uint256"
        }
      ],
      "name": "stakedAmountsPerWorker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storagePerWorkerInGb",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tSQD",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        }
      ],
      "name": "workerIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "workers",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "peerId",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "registeredAt",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "deregisteredAt",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x71ddab620129fd2729bf463f1683b5e2c642f13fff7a339cbbb2d7b9c498fb68",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xedFa74C6bC620CC992d4D2C9A27803748B8f5a64",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "2806002",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7a7dbc2a81f4ce5a5c731efeabe1674692ca820709079adc7ddffd7c083de563",
    "transactionHash": "0x71ddab620129fd2729bf463f1683b5e2c642f13fff7a339cbbb2d7b9c498fb68",
    "logs": [],
    "blockNumber": 36287967,
    "cumulativeGasUsed": "2806002",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6a117CBe9Bfab42151396FC54ddb588151a8Aac7",
    100
  ],
  "numDeployments": 3,
  "solcInputHash": "8435573c76e29e88148da4148ee5ff92",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tSQD\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"_epochLengthBlocks\",\"type\":\"uint128\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"workerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"workerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"workerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deregistedAt\",\"type\":\"uint256\"}],\"name\":\"WorkerDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"workerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registeredAt\",\"type\":\"uint256\"}],\"name\":\"WorkerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"workerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"WorkerWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOND_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeWorkerIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"}],\"name\":\"deregister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"effectiveTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveWorkerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveWorkers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"registeredAt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"deregisteredAt\",\"type\":\"uint128\"}],\"internalType\":\"struct WorkerRegistration.Worker[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllWorkersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getWorkerByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"registeredAt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"deregisteredAt\",\"type\":\"uint128\"}],\"internalType\":\"struct WorkerRegistration.Worker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpoch\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"workerId\",\"type\":\"uint256\"}],\"name\":\"stakedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"workerId\",\"type\":\"uint256\"}],\"name\":\"stakedAmountsPerWorker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storagePerWorkerInGb\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tSQD\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"}],\"name\":\"workerIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"workers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"peerId\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"registeredAt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"deregisteredAt\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/WorkerRegistration.sol\":\"WorkerRegistration\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"src/WorkerRegistration.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract WorkerRegistration {\\n  using Counters for Counters.Counter;\\n  using SafeMath for uint256;\\n\\n  //TODO update bond amount\\n  uint256 public constant BOND_AMOUNT = 100000 * 10 ** 18;\\n  // uint256 public constant EPOCH_LENGTH = 20700; // approximately 72 hours in blocks\\n  // uint256 public constant LOCK_PERIOD = EPOCH_LENGTH;\\n\\n  IERC20 public tSQD;\\n  uint256 public storagePerWorkerInGb = 1000;\\n\\n  uint128 public immutable epochLength;\\n  uint128 public immutable lockPeriod;\\n\\n  Counters.Counter private workerIdTracker;\\n\\n  struct Worker {\\n    address creator;\\n    bytes peerId;\\n    uint256 bond;\\n    // the worker is registered at the start\\n    // of the next epoch, after register() is called\\n    uint128 registeredAt;\\n    // the worker is de-registered at the start of\\n    // the next epoch, after deregister() is called\\n    uint128 deregisteredAt;\\n  }\\n\\n  mapping(uint256 => Worker) public workers;\\n  mapping(bytes peerId => uint256 id) public workerIds;\\n  mapping(address staker => mapping(uint256 workerId => uint256 amount)) public stakedAmounts;\\n  mapping(uint256 workerId => uint256 amount) public stakedAmountsPerWorker;\\n  uint256[] public activeWorkerIds;\\n  uint256 public totalStaked;\\n\\n  event WorkerRegistered(\\n    uint256 indexed workerId, bytes indexed peerId, address indexed registrar, uint256 registeredAt\\n  );\\n  event WorkerDeregistered(uint256 indexed workerId, address indexed account, uint256 deregistedAt);\\n  event WorkerWithdrawn(uint256 indexed workerId, address indexed account);\\n  event Delegated(uint256 indexed workerId, address indexed staker, uint256 amount);\\n  event Unstaked(uint256 indexed workerId, address indexed staker, uint256 amount);\\n\\n  constructor(IERC20 _tSQD, uint128 _epochLengthBlocks) {\\n    tSQD = _tSQD;\\n    epochLength = _epochLengthBlocks;\\n    lockPeriod = _epochLengthBlocks;\\n  }\\n\\n  function register(bytes calldata peerId) external {\\n    require(peerId.length <= 64, \\\"Peer ID too large\\\");\\n    require(workerIds[peerId] == 0, \\\"Worker already registered\\\");\\n\\n    workerIdTracker.increment();\\n    uint256 workerId = workerIdTracker.current();\\n\\n    workers[workerId] =\\n      Worker({creator: msg.sender, peerId: peerId, bond: BOND_AMOUNT, registeredAt: nextEpoch(), deregisteredAt: 0});\\n\\n    workerIds[peerId] = workerId;\\n    activeWorkerIds.push(workerId);\\n\\n    tSQD.transferFrom(msg.sender, address(this), BOND_AMOUNT);\\n    emit WorkerRegistered(workerId, peerId, msg.sender, workers[workerId].registeredAt);\\n  }\\n\\n  function deregister(bytes calldata peerId) external {\\n    uint256 workerId = workerIds[peerId];\\n    require(workerId != 0, \\\"Worker not registered\\\");\\n    require(isWorkerActive(workers[workerId]), \\\"Worker not active\\\");\\n    require(workers[workerId].creator == msg.sender, \\\"Not worker creator\\\");\\n\\n    workers[workerId].deregisteredAt = nextEpoch();\\n\\n    // Remove the workerId from the activeWorkerIds array\\n    for (uint256 i = 0; i < activeWorkerIds.length; i++) {\\n      if (activeWorkerIds[i] == workerId) {\\n        activeWorkerIds[i] = activeWorkerIds[activeWorkerIds.length - 1];\\n        activeWorkerIds.pop();\\n        break;\\n      }\\n    }\\n\\n    emit WorkerDeregistered(workerId, msg.sender, workers[workerId].deregisteredAt);\\n  }\\n\\n  function withdraw(bytes calldata peerId) external {\\n    uint256 workerId = workerIds[peerId];\\n    require(workerId != 0, \\\"Worker not registered\\\");\\n    Worker storage worker = workers[workerId];\\n    require(!isWorkerActive(worker), \\\"Worker is active\\\");\\n    require(worker.creator == msg.sender, \\\"Not worker creator\\\");\\n    require(block.number >= worker.deregisteredAt + lockPeriod, \\\"Worker is locked\\\");\\n\\n    uint256 bond = worker.bond;\\n    delete workers[workerId];\\n\\n    tSQD.transfer(msg.sender, bond);\\n\\n    emit WorkerWithdrawn(workerId, msg.sender);\\n  }\\n\\n  function delegate(bytes calldata peerId, uint256 amount) external {\\n    uint256 workerId = workerIds[peerId];\\n    require(workerId != 0, \\\"Worker not registered\\\");\\n    require(isWorkerActive(workers[workerId]), \\\"Worker not active\\\");\\n\\n    tSQD.transferFrom(msg.sender, address(this), amount);\\n    stakedAmounts[msg.sender][workerId] += amount;\\n    totalStaked += amount;\\n    stakedAmountsPerWorker[workerId] += amount;\\n\\n    emit Delegated(workerId, msg.sender, amount);\\n  }\\n\\n  function unstake(bytes calldata peerId, uint256 amount) external {\\n    uint256 workerId = workerIds[peerId];\\n    require(workerId != 0, \\\"Worker not registered\\\");\\n\\n    uint256 stakedAmount = stakedAmounts[msg.sender][workerId];\\n    require(stakedAmount >= amount, \\\"Insufficient staked amount\\\");\\n\\n    stakedAmounts[msg.sender][workerId] -= amount;\\n    totalStaked -= amount;\\n    stakedAmountsPerWorker[workerId] -= amount;\\n    tSQD.transfer(msg.sender, amount);\\n\\n    emit Unstaked(workerId, msg.sender, amount);\\n  }\\n\\n  function nextEpoch() public view returns (uint128) {\\n    return (uint128(block.number) / epochLength + 1) * epochLength;\\n  }\\n\\n  function getActiveWorkers() public view returns (Worker[] memory) {\\n    Worker[] memory activeWorkers = new Worker[](getActiveWorkerCount());\\n\\n    uint256 activeIndex = 0;\\n    for (uint256 i = 0; i < activeWorkerIds.length; i++) {\\n      uint256 workerId = activeWorkerIds[i];\\n      Worker storage worker = workers[workerId];\\n      if (isWorkerActive(worker)) {\\n        activeWorkers[activeIndex] = worker;\\n        activeIndex++;\\n      }\\n    }\\n\\n    return activeWorkers;\\n  }\\n\\n  function isWorkerActive(Worker storage worker) internal view returns (bool) {\\n    return worker.registeredAt <= block.number && (worker.deregisteredAt == 0 || worker.deregisteredAt >= block.number);\\n  }\\n\\n  function getActiveWorkerCount() public view returns (uint256) {\\n    uint256 activeCount = 0;\\n    for (uint256 i = 0; i < activeWorkerIds.length; i++) {\\n      uint256 workerId = activeWorkerIds[i];\\n      Worker storage worker = workers[workerId];\\n      if (isWorkerActive(worker)) {\\n        activeCount++;\\n      }\\n    }\\n    return activeCount;\\n  }\\n\\n  function getWorkerByIndex(uint256 index) external view returns (Worker memory) {\\n    require(index < activeWorkerIds.length, \\\"Index out of bounds\\\");\\n    uint256 workerId = activeWorkerIds[index];\\n    return workers[workerId];\\n  }\\n\\n  function getAllWorkersCount() external view returns (uint256) {\\n    return activeWorkerIds.length;\\n  }\\n\\n  function effectiveTVL() external view returns (uint256) {\\n    return getActiveWorkerCount() * BOND_AMOUNT + activeStake();\\n  }\\n\\n  function activeStake() public view returns (uint256) {\\n    uint256 stake = 0;\\n    // TODO optimize loop\\n    for (uint256 i = 0; i < activeWorkerIds.length; i++) {\\n      uint256 workerId = activeWorkerIds[i];\\n      Worker storage worker = workers[workerId];\\n      if (isWorkerActive(worker)) {\\n        stake += stakedAmountsPerWorker[workerId];\\n      }\\n    }\\n\\n    return stake;\\n  }\\n}\\n\",\"keccak256\":\"0x76543a616c0d752ebe05abd5b524a27eb3808d0afb692ac17d015cd705c8a3dc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526103e86001553480156200001757600080fd5b50604051620033173803806200331783398181016040528101906200003d9190620001a8565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806fffffffffffffffffffffffffffffffff166080816fffffffffffffffffffffffffffffffff1681525050806fffffffffffffffffffffffffffffffff1660a0816fffffffffffffffffffffffffffffffff16815250505050620001ef565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010f82620000e2565b9050919050565b6000620001238262000102565b9050919050565b620001358162000116565b81146200014157600080fd5b50565b60008151905062000155816200012a565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b62000182816200015b565b81146200018e57600080fd5b50565b600081519050620001a28162000177565b92915050565b60008060408385031215620001c257620001c1620000dd565b5b6000620001d28582860162000144565b9250506020620001e58582860162000191565b9150509250929050565b60805160a0516130ed6200022a600039600081816105c60152610b41015260008181610b6501528181611731015261175401526130ed6000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806380a07d2b116100c3578063bcacc70a1161007c578063bcacc70a1461038e578063bd49c35f146103ac578063c760e6b0146103ca578063c98a15e4146103e8578063f1a22dc214610418578063f905aaf61461044c5761014d565b806380a07d2b146102e0578063817b1cd2146102fc57806382fbdc9c1461031a578063a0f395d614610336578063aea0e78b14610354578063b4d0a564146103725761014d565b80633fd8b02f116101155780633fd8b02f146101f857806357d775f81461021657806363e996d214610234578063659a1a01146102645780637a39cb2b146102805780637d46b1f2146102b05761014d565b80630968f264146101525780631b6eb1bc1461016e5780632b5d15291461019e578063393bc3d9146101bc5780633e556827146101da575b600080fd5b61016c60048036038101906101679190611ed9565b61046a565b005b61018860048036038101906101839190611fba565b6107f2565b6040516101959190612009565b60405180910390f35b6101a6610817565b6040516101b39190612009565b60405180910390f35b6101c461081d565b6040516101d19190612235565b60405180910390f35b6101e2610ab4565b6040516101ef9190612009565b60405180910390f35b610200610b3f565b60405161020d9190612266565b60405180910390f35b61021e610b63565b60405161022b9190612266565b60405180910390f35b61024e60048036038101906102499190612281565b610b87565b60405161025b9190612009565b60405180910390f35b61027e600480360381019061027991906122ae565b610bab565b005b61029a6004803603810190610295919061243e565b610e0d565b6040516102a79190612009565b60405180910390f35b6102ca60048036038101906102c59190612281565b610e3b565b6040516102d791906124fd565b60405180910390f35b6102fa60048036038101906102f591906122ae565b611059565b005b6103046112f8565b6040516103119190612009565b60405180910390f35b610334600480360381019061032f9190611ed9565b6112fe565b005b61033e611709565b60405161034b919061257e565b60405180910390f35b61035c61172d565b6040516103699190612266565b60405180910390f35b61038c60048036038101906103879190611ed9565b611797565b005b610396611a9f565b6040516103a39190612009565b60405180910390f35b6103b4611aad565b6040516103c19190612009565b60405180910390f35b6103d2611b4b565b6040516103df9190612009565b60405180910390f35b61040260048036038101906103fd9190612281565b611b81565b60405161040f9190612009565b60405180910390f35b610432600480360381019061042d9190612281565b611b99565b6040516104439594939291906125f2565b60405180910390f35b610454611caf565b6040516104619190612009565b60405180910390f35b60006004838360405161047e92919061267c565b9081526020016040518091039020549050600081036104d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c9906126f2565b60405180910390fd5b60006003600083815260200190815260200160002090506104f281611cbc565b15610532576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105299061275e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146105c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bb906127ca565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008160030160109054906101000a90046fffffffffffffffffffffffffffffffff166106109190612819565b6fffffffffffffffffffffffffffffffff16431015610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b906128a9565b60405180910390fd5b60008160020154905060036000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006106b89190611d9a565b60028201600090556003820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556003820160106101000a8154906fffffffffffffffffffffffffffffffff0219169055505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016107639291906128c9565b6020604051808303816000875af1158015610782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a6919061292a565b503373ffffffffffffffffffffffffffffffffffffffff16837fb6ee3a0ef8982f0f296a13a075fe56e5fd8c1bc2282a3c5b54f12d514ed7a95660405160405180910390a35050505050565b6005602052816000526040600020602052806000526040600020600091509150505481565b60015481565b60606000610829610ab4565b67ffffffffffffffff81111561084257610841612313565b5b60405190808252806020026020018201604052801561087b57816020015b610868611dda565b8152602001906001900390816108605790505b5090506000805b600780549050811015610aab576000600782815481106108a5576108a4612957565b5b9060005260206000200154905060006003600083815260200190815260200160002090506108d281611cbc565b15610a9657806040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610949906129b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610975906129b5565b80156109c25780601f10610997576101008083540402835291602001916109c2565b820191906000526020600020905b8154815290600101906020018083116109a557829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016003820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050858581518110610a7c57610a7b612957565b5b60200260200101819052508380610a92906129e6565b9450505b50508080610aa3906129e6565b915050610882565b50819250505090565b6000806000905060005b600780549050811015610b3757600060078281548110610ae157610ae0612957565b5b906000526020600020015490506000600360008381526020019081526020016000209050610b0e81611cbc565b15610b22578380610b1e906129e6565b9450505b50508080610b2f906129e6565b915050610abe565b508091505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60078181548110610b9757600080fd5b906000526020600020016000915090505481565b600060048484604051610bbf92919061267c565b908152602001604051809103902054905060008103610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a906126f2565b60405180910390fd5b610c2e60036000838152602001908152602001600020611cbc565b610c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6490612a7a565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610cca93929190612a9a565b6020604051808303816000875af1158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0d919061292a565b5081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000828254610d6e9190612ad1565b925050819055508160086000828254610d879190612ad1565b9250508190555081600660008381526020019081526020016000206000828254610db19190612ad1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16817fbc40331a4f55f86126048556dda1c0e7c724b1201aece6eea78ad1d10753943a84604051610dff9190612009565b60405180910390a350505050565b6004818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b610e43611dda565b6007805490508210610e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8190612b51565b60405180910390fd5b600060078381548110610ea057610e9f612957565b5b90600052602060002001549050600360008281526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610f31906129b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5d906129b5565b8015610faa5780601f10610f7f57610100808354040283529160200191610faa565b820191906000526020600020905b815481529060010190602001808311610f8d57829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016003820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050915050919050565b60006004848460405161106d92919061267c565b9081526020016040518091039020549050600081036110c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b8906126f2565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905082811015611159576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115090612bbd565b60405180910390fd5b82600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060008282546111b99190612bdd565b9250508190555082600860008282546111d29190612bdd565b92505081905550826006600084815260200190815260200160002060008282546111fc9190612bdd565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33856040518363ffffffff1660e01b815260040161125e9291906128c9565b6020604051808303816000875af115801561127d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a1919061292a565b503373ffffffffffffffffffffffffffffffffffffffff16827f37375b03d8924bd8f076f11f8411b9962aa5c02fb489021507bc6bb6f850e365856040516112e99190612009565b60405180910390a35050505050565b60085481565b6040828290501115611345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133c90612c5d565b60405180910390fd5b60006004838360405161135992919061267c565b908152602001604051809103902054146113a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139f90612cc9565b60405180910390fd5b6113b26002611d76565b60006113be6002611d8c565b90506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200169152d02c7e14af6800000815260200161144961172d565b6fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152506003600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816114e69190612e8b565b506040820151816002015560608201518160030160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060808201518160030160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550905050806004848460405161158592919061267c565b908152602001604051809103902081905550600781908060018154018082558091505060019003906000526020600020016000909190919091505560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333069152d02c7e14af68000006040518463ffffffff1660e01b815260040161162793929190612a9a565b6020604051808303816000875af1158015611646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166a919061292a565b503373ffffffffffffffffffffffffffffffffffffffff16838360405161169292919061267c565b6040518091039020827fe6c84295c123762f302ffd57e3ba60e58ec0fe975ed75209a8b9cbaee2934a176003600086815260200190815260200160002060030160009054906101000a90046fffffffffffffffffffffffffffffffff166040516116fc9190612f8e565b60405180910390a4505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f000000000000000000000000000000000000000000000000000000000000000060017f00000000000000000000000000000000000000000000000000000000000000004361177e9190612fd8565b6117889190612819565b6117929190613009565b905090565b6000600483836040516117ab92919061267c565b9081526020016040518091039020549050600081036117ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f6906126f2565b60405180910390fd5b61181a60036000838152602001908152602001600020611cbc565b611859576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185090612a7a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f4906127ca565b60405180910390fd5b61190561172d565b6003600083815260200190815260200160002060030160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060005b600780549050811015611a1857816007828154811061197657611975612957565b5b906000526020600020015403611a05576007600160078054905061199a9190612bdd565b815481106119ab576119aa612957565b5b9060005260206000200154600782815481106119ca576119c9612957565b5b906000526020600020018190555060078054806119ea576119e9613046565b5b60019003818190600052602060002001600090559055611a18565b8080611a10906129e6565b915050611954565b503373ffffffffffffffffffffffffffffffffffffffff16817f4a7ca6c9178181481ac5c6e9ed0965213ae489c4aaf53323bd5e1f318a9d77c36003600085815260200190815260200160002060030160109054906101000a90046fffffffffffffffffffffffffffffffff16604051611a929190612f8e565b60405180910390a3505050565b69152d02c7e14af680000081565b6000806000905060005b600780549050811015611b4357600060078281548110611ada57611ad9612957565b5b906000526020600020015490506000600360008381526020019081526020016000209050611b0781611cbc565b15611b2e57600660008381526020019081526020016000205484611b2b9190612ad1565b93505b50508080611b3b906129e6565b915050611ab7565b508091505090565b6000611b55611aad565b69152d02c7e14af6800000611b68610ab4565b611b729190613075565b611b7c9190612ad1565b905090565b60066020528060005260406000206000915090505481565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001018054611be2906129b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611c0e906129b5565b8015611c5b5780601f10611c3057610100808354040283529160200191611c5b565b820191906000526020600020905b815481529060010190602001808311611c3e57829003601f168201915b5050505050908060020154908060030160009054906101000a90046fffffffffffffffffffffffffffffffff16908060030160109054906101000a90046fffffffffffffffffffffffffffffffff16905085565b6000600780549050905090565b6000438260030160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1611158015611d6f575060008260030160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff161480611d6e5750438260030160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1610155b5b9050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b508054611da6906129b5565b6000825580601f10611db85750611dd7565b601f016020900490600052602060002090810190611dd69190611e43565b5b50565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b5b80821115611e5c576000816000905550600101611e44565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611e9957611e98611e74565b5b8235905067ffffffffffffffff811115611eb657611eb5611e79565b5b602083019150836001820283011115611ed257611ed1611e7e565b5b9250929050565b60008060208385031215611ef057611eef611e6a565b5b600083013567ffffffffffffffff811115611f0e57611f0d611e6f565b5b611f1a85828601611e83565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f5182611f26565b9050919050565b611f6181611f46565b8114611f6c57600080fd5b50565b600081359050611f7e81611f58565b92915050565b6000819050919050565b611f9781611f84565b8114611fa257600080fd5b50565b600081359050611fb481611f8e565b92915050565b60008060408385031215611fd157611fd0611e6a565b5b6000611fdf85828601611f6f565b9250506020611ff085828601611fa5565b9150509250929050565b61200381611f84565b82525050565b600060208201905061201e6000830184611ffa565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61205981611f46565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561209957808201518184015260208101905061207e565b60008484015250505050565b6000601f19601f8301169050919050565b60006120c18261205f565b6120cb818561206a565b93506120db81856020860161207b565b6120e4816120a5565b840191505092915050565b6120f881611f84565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b612123816120fe565b82525050565b600060a0830160008301516121416000860182612050565b506020830151848203602086015261215982826120b6565b915050604083015161216e60408601826120ef565b506060830151612181606086018261211a565b506080830151612194608086018261211a565b508091505092915050565b60006121ab8383612129565b905092915050565b6000602082019050919050565b60006121cb82612024565b6121d5818561202f565b9350836020820285016121e785612040565b8060005b858110156122235784840389528151612204858261219f565b945061220f836121b3565b925060208a019950506001810190506121eb565b50829750879550505050505092915050565b6000602082019050818103600083015261224f81846121c0565b905092915050565b612260816120fe565b82525050565b600060208201905061227b6000830184612257565b92915050565b60006020828403121561229757612296611e6a565b5b60006122a584828501611fa5565b91505092915050565b6000806000604084860312156122c7576122c6611e6a565b5b600084013567ffffffffffffffff8111156122e5576122e4611e6f565b5b6122f186828701611e83565b9350935050602061230486828701611fa5565b9150509250925092565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61234b826120a5565b810181811067ffffffffffffffff8211171561236a57612369612313565b5b80604052505050565b600061237d611e60565b90506123898282612342565b919050565b600067ffffffffffffffff8211156123a9576123a8612313565b5b6123b2826120a5565b9050602081019050919050565b82818337600083830152505050565b60006123e16123dc8461238e565b612373565b9050828152602081018484840111156123fd576123fc61230e565b5b6124088482856123bf565b509392505050565b600082601f83011261242557612424611e74565b5b81356124358482602086016123ce565b91505092915050565b60006020828403121561245457612453611e6a565b5b600082013567ffffffffffffffff81111561247257612471611e6f565b5b61247e84828501612410565b91505092915050565b600060a08301600083015161249f6000860182612050565b50602083015184820360208601526124b782826120b6565b91505060408301516124cc60408601826120ef565b5060608301516124df606086018261211a565b5060808301516124f2608086018261211a565b508091505092915050565b600060208201905081810360008301526125178184612487565b905092915050565b6000819050919050565b600061254461253f61253a84611f26565b61251f565b611f26565b9050919050565b600061255682612529565b9050919050565b60006125688261254b565b9050919050565b6125788161255d565b82525050565b6000602082019050612593600083018461256f565b92915050565b6125a281611f46565b82525050565b600082825260208201905092915050565b60006125c48261205f565b6125ce81856125a8565b93506125de81856020860161207b565b6125e7816120a5565b840191505092915050565b600060a0820190506126076000830188612599565b818103602083015261261981876125b9565b90506126286040830186611ffa565b6126356060830185612257565b6126426080830184612257565b9695505050505050565b600081905092915050565b6000612663838561264c565b93506126708385846123bf565b82840190509392505050565b6000612689828486612657565b91508190509392505050565b600082825260208201905092915050565b7f576f726b6572206e6f7420726567697374657265640000000000000000000000600082015250565b60006126dc601583612695565b91506126e7826126a6565b602082019050919050565b6000602082019050818103600083015261270b816126cf565b9050919050565b7f576f726b65722069732061637469766500000000000000000000000000000000600082015250565b6000612748601083612695565b915061275382612712565b602082019050919050565b600060208201905081810360008301526127778161273b565b9050919050565b7f4e6f7420776f726b65722063726561746f720000000000000000000000000000600082015250565b60006127b4601283612695565b91506127bf8261277e565b602082019050919050565b600060208201905081810360008301526127e3816127a7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612824826120fe565b915061282f836120fe565b925082820190506fffffffffffffffffffffffffffffffff811115612857576128566127ea565b5b92915050565b7f576f726b6572206973206c6f636b656400000000000000000000000000000000600082015250565b6000612893601083612695565b915061289e8261285d565b602082019050919050565b600060208201905081810360008301526128c281612886565b9050919050565b60006040820190506128de6000830185612599565b6128eb6020830184611ffa565b9392505050565b60008115159050919050565b612907816128f2565b811461291257600080fd5b50565b600081519050612924816128fe565b92915050565b6000602082840312156129405761293f611e6a565b5b600061294e84828501612915565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806129cd57607f821691505b6020821081036129e0576129df612986565b5b50919050565b60006129f182611f84565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a2357612a226127ea565b5b600182019050919050565b7f576f726b6572206e6f7420616374697665000000000000000000000000000000600082015250565b6000612a64601183612695565b9150612a6f82612a2e565b602082019050919050565b60006020820190508181036000830152612a9381612a57565b9050919050565b6000606082019050612aaf6000830186612599565b612abc6020830185612599565b612ac96040830184611ffa565b949350505050565b6000612adc82611f84565b9150612ae783611f84565b9250828201905080821115612aff57612afe6127ea565b5b92915050565b7f496e646578206f7574206f6620626f756e647300000000000000000000000000600082015250565b6000612b3b601383612695565b9150612b4682612b05565b602082019050919050565b60006020820190508181036000830152612b6a81612b2e565b9050919050565b7f496e73756666696369656e74207374616b656420616d6f756e74000000000000600082015250565b6000612ba7601a83612695565b9150612bb282612b71565b602082019050919050565b60006020820190508181036000830152612bd681612b9a565b9050919050565b6000612be882611f84565b9150612bf383611f84565b9250828203905081811115612c0b57612c0a6127ea565b5b92915050565b7f5065657220494420746f6f206c61726765000000000000000000000000000000600082015250565b6000612c47601183612695565b9150612c5282612c11565b602082019050919050565b60006020820190508181036000830152612c7681612c3a565b9050919050565b7f576f726b657220616c7265616479207265676973746572656400000000000000600082015250565b6000612cb3601983612695565b9150612cbe82612c7d565b602082019050919050565b60006020820190508181036000830152612ce281612ca6565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612d4b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d0e565b612d558683612d0e565b95508019841693508086168417925050509392505050565b6000612d88612d83612d7e84611f84565b61251f565b611f84565b9050919050565b6000819050919050565b612da283612d6d565b612db6612dae82612d8f565b848454612d1b565b825550505050565b600090565b612dcb612dbe565b612dd6818484612d99565b505050565b5b81811015612dfa57612def600082612dc3565b600181019050612ddc565b5050565b601f821115612e3f57612e1081612ce9565b612e1984612cfe565b81016020851015612e28578190505b612e3c612e3485612cfe565b830182612ddb565b50505b505050565b600082821c905092915050565b6000612e6260001984600802612e44565b1980831691505092915050565b6000612e7b8383612e51565b9150826002028217905092915050565b612e948261205f565b67ffffffffffffffff811115612ead57612eac612313565b5b612eb782546129b5565b612ec2828285612dfe565b600060209050601f831160018114612ef55760008415612ee3578287015190505b612eed8582612e6f565b865550612f55565b601f198416612f0386612ce9565b60005b82811015612f2b57848901518255600182019150602085019450602081019050612f06565b86831015612f485784890151612f44601f891682612e51565b8355505b6001600288020188555050505b505050505050565b6000612f78612f73612f6e846120fe565b61251f565b611f84565b9050919050565b612f8881612f5d565b82525050565b6000602082019050612fa36000830184612f7f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612fe3826120fe565b9150612fee836120fe565b925082612ffe57612ffd612fa9565b5b828204905092915050565b6000613014826120fe565b915061301f836120fe565b925082820261302d816120fe565b915080821461303f5761303e6127ea565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061308082611f84565b915061308b83611f84565b925082820261309981611f84565b915082820484148315176130b0576130af6127ea565b5b509291505056fea2646970667358221220bcde468eae5efb1de03917bebc4cb3843a3cc8e3a017b7be801cf8285d2a6e8964736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3126,
        "contract": "src/WorkerRegistration.sol:WorkerRegistration",
        "label": "tSQD",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)1053"
      },
      {
        "astId": 3129,
        "contract": "src/WorkerRegistration.sol:WorkerRegistration",
        "label": "storagePerWorkerInGb",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3136,
        "contract": "src/WorkerRegistration.sol:WorkerRegistration",
        "label": "workerIdTracker",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1106_storage"
      },
      {
        "astId": 3152,
        "contract": "src/WorkerRegistration.sol:WorkerRegistration",
        "label": "workers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Worker)3147_storage)"
      },
      {
        "astId": 3156,
        "contract": "src/WorkerRegistration.sol:WorkerRegistration",
        "label": "workerIds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes_memory_ptr,t_uint256)"
      },
      {
        "astId": 3162,
        "contract": "src/WorkerRegistration.sol:WorkerRegistration",
        "label": "stakedAmounts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3166,
        "contract": "src/WorkerRegistration.sol:WorkerRegistration",
        "label": "stakedAmountsPerWorker",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3169,
        "contract": "src/WorkerRegistration.sol:WorkerRegistration",
        "label": "activeWorkerIds",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3171,
        "contract": "src/WorkerRegistration.sol:WorkerRegistration",
        "label": "totalStaked",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1053": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Worker)3147_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WorkerRegistration.Worker)",
        "numberOfBytes": "32",
        "value": "t_struct(Worker)3147_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)1106_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1105,
            "contract": "src/WorkerRegistration.sol:WorkerRegistration",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Worker)3147_storage": {
        "encoding": "inplace",
        "label": "struct WorkerRegistration.Worker",
        "members": [
          {
            "astId": 3138,
            "contract": "src/WorkerRegistration.sol:WorkerRegistration",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3140,
            "contract": "src/WorkerRegistration.sol:WorkerRegistration",
            "label": "peerId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3142,
            "contract": "src/WorkerRegistration.sol:WorkerRegistration",
            "label": "bond",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3144,
            "contract": "src/WorkerRegistration.sol:WorkerRegistration",
            "label": "registeredAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint128"
          },
          {
            "astId": 3146,
            "contract": "src/WorkerRegistration.sol:WorkerRegistration",
            "label": "deregisteredAt",
            "offset": 16,
            "slot": "3",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
