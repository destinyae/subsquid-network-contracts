/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  WorkerRegistration,
  WorkerRegistrationInterface,
} from "../../contracts/WorkerRegistration";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_tSQT",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_epochLengthBlocks",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "workerId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "WorkerDeregistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "workerId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "libp2pPubKey",
        type: "bytes32",
      },
    ],
    name: "WorkerRegistered",
    type: "event",
  },
  {
    inputs: [],
    name: "BOND_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "activeWorkerIds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deregister",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "epochLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getActiveWorkers",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "account",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "libp2pPubKey",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "bond",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "registeredAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deregisteredAt",
            type: "uint256",
          },
        ],
        internalType: "struct WorkerRegistration.Worker[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "libp2pPubKey",
        type: "bytes32",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tSQD",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "workerIds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "workers",
    outputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "libp2pPubKey",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "bond",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "registeredAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deregisteredAt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200197b3803806200197b8339818101604052810190620000379190620000c6565b600160008190555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060028190555060025460038190555050506200018d565b600081519050620000a98162000159565b92915050565b600081519050620000c08162000173565b92915050565b60008060408385031215620000da57600080fd5b6000620000ea8582860162000098565b9250506020620000fd85828601620000af565b9150509250929050565b600062000114826200012f565b9050919050565b6000620001288262000107565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b62000164816200011b565b81146200017057600080fd5b50565b6200017e816200014f565b81146200018a57600080fd5b50565b6117de806200019d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063a0f395d611610071578063a0f395d614610142578063aff5edb114610160578063bcacc70a1461016a578063d0d8299014610188578063e1fa8e84146101b8578063f1a22dc2146101d4576100a9565b8063393bc3d9146100ae5780633ccfd60b146100cc5780633fd8b02f146100d657806357d775f8146100f457806363e996d214610112575b600080fd5b6100b6610208565b6040516100c3919061139d565b60405180910390f35b6100d46104a7565b005b6100de61076f565b6040516100eb91906114b5565b60405180910390f35b6100fc610775565b60405161010991906114b5565b60405180910390f35b61012c60048036038101906101279190610ffa565b61077b565b60405161013991906114b5565b60405180910390f35b61014a61079f565b60405161015791906113da565b60405180910390f35b6101686107c5565b005b610172610aa0565b60405161017f91906114b5565b60405180910390f35b6101a2600480360381019061019d9190610f7f565b610aae565b6040516101af91906114b5565b60405180910390f35b6101d260048036038101906101cd9190610fd1565b610ac6565b005b6101ee60048036038101906101e99190610ffa565b610ddf565b6040516101ff959493929190611321565b60405180910390f35b60606000805b6007805490508110156102ad57600060078281548110610257577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050600060056000838152602001908152602001600020905061028481610e35565b15610298578380610294906116a5565b9450505b505080806102a5906116a5565b91505061020e565b5060008167ffffffffffffffff8111156102f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561032957816020015b610316610ee3565b81526020019060019003908161030e5790505b5090506000805b60078054905081101561049d57600060078281548110610379577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905060006005600083815260200190815260200160002090506103a681610e35565b1561048857806040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152505085858151811061046e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508380610484906116a5565b9450505b50508080610495906116a5565b915050610330565b5081935050505090565b6104af610e65565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052e90611415565b60405180910390fd5b61055260056000838152602001908152602001600020610e35565b15610592576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610589906113f5565b60405180910390fd5b60035460056000838152602001908152602001600020600401546105b6919061151a565b4310156105f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ef90611455565b60405180910390fd5b60006005600083815260200190815260200160002060020154905060056000838152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560018201600090556002820160009055600382016000905560048201600090555050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610710929190611374565b602060405180830381600087803b15801561072a57600080fd5b505af115801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190610fa8565b50505061076d610eb5565b565b60035481565b60025481565b6007818154811061078b57600080fd5b906000526020600020016000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6107cd610e65565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000811415610855576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084c90611415565b60405180910390fd5b61087060056000838152602001908152602001600020610e35565b6108af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a690611475565b60405180910390fd5b6002546001600254436108c29190611570565b6108cc919061151a565b6108d691906115a1565b600560008381526020019081526020016000206004018190555060005b600780549050811015610a5057816007828154811061093b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001541415610a3d576007600160078054905061096091906115fb565b81548110610997577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154600782815481106109dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055506007805480610a22577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055610a50565b8080610a48906116a5565b9150506108f3565b503373ffffffffffffffffffffffffffffffffffffffff16817fe7c7e3bab8a51e5379a3d0a650690e98182afb9c6651b8c434fcbfeb33b7649b60405160405180910390a350610a9e610eb5565b565b69152d02c7e14af680000081565b60066020528060005260406000206000915090505481565b610ace610e65565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610b50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4790611435565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd333069152d02c7e14af68000006040518463ffffffff1660e01b8152600401610bb9939291906112ea565b602060405180830381600087803b158015610bd357600080fd5b505af1158015610be7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0b9190610fa8565b50610c166004610ebf565b6000610c226004610ed5565b90506040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200183815260200169152d02c7e14af68000008152602001600254600160025443610c749190611570565b610c7e919061151a565b610c8891906115a1565b815260200160008152506005600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015590505080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060078190806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff16817f0466b4e96fe653028fe2467d95ce115452b763cb0d28167d8d29a463047b32da84604051610dcb91906113bf565b60405180910390a350610ddc610eb5565b50565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154905085565b600043826003015411158015610e5e5750600082600401541480610e5d575043826004015410155b5b9050919050565b60026000541415610eab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea290611495565b60405180910390fd5b6002600081905550565b6001600081905550565b6001816000016000828254019250508190555050565b600081600001549050919050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681526020016000815260200160008152602001600081525090565b600081359050610f3a8161174c565b92915050565b600081519050610f4f81611763565b92915050565b600081359050610f648161177a565b92915050565b600081359050610f7981611791565b92915050565b600060208284031215610f9157600080fd5b6000610f9f84828501610f2b565b91505092915050565b600060208284031215610fba57600080fd5b6000610fc884828501610f40565b91505092915050565b600060208284031215610fe357600080fd5b6000610ff184828501610f55565b91505092915050565b60006020828403121561100c57600080fd5b600061101a84828501610f6a565b91505092915050565b600061102f8383611264565b60a08301905092915050565b6110448161162f565b82525050565b6110538161162f565b82525050565b6000611064826114e0565b61106e81856114f8565b9350611079836114d0565b8060005b838110156110aa5781516110918882611023565b975061109c836114eb565b92505060018101905061107d565b5085935050505092915050565b6110c08161164d565b82525050565b6110cf8161164d565b82525050565b6110de81611681565b82525050565b60006110f1601083611509565b91507f576f726b657220697320616374697665000000000000000000000000000000006000830152602082019050919050565b6000611131601583611509565b91507f576f726b6572206e6f74207265676973746572656400000000000000000000006000830152602082019050919050565b6000611171601983611509565b91507f576f726b657220616c72656164792072656769737465726564000000000000006000830152602082019050919050565b60006111b1601083611509565b91507f576f726b6572206973206c6f636b6564000000000000000000000000000000006000830152602082019050919050565b60006111f1601183611509565b91507f576f726b6572206e6f74206163746976650000000000000000000000000000006000830152602082019050919050565b6000611231601f83611509565b91507f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006000830152602082019050919050565b60a08201600082015161127a600085018261103b565b50602082015161128d60208501826110b7565b5060408201516112a060408501826112cc565b5060608201516112b360608501826112cc565b5060808201516112c660808501826112cc565b50505050565b6112d581611677565b82525050565b6112e481611677565b82525050565b60006060820190506112ff600083018661104a565b61130c602083018561104a565b61131960408301846112db565b949350505050565b600060a082019050611336600083018861104a565b61134360208301876110c6565b61135060408301866112db565b61135d60608301856112db565b61136a60808301846112db565b9695505050505050565b6000604082019050611389600083018561104a565b61139660208301846112db565b9392505050565b600060208201905081810360008301526113b78184611059565b905092915050565b60006020820190506113d460008301846110c6565b92915050565b60006020820190506113ef60008301846110d5565b92915050565b6000602082019050818103600083015261140e816110e4565b9050919050565b6000602082019050818103600083015261142e81611124565b9050919050565b6000602082019050818103600083015261144e81611164565b9050919050565b6000602082019050818103600083015261146e816111a4565b9050919050565b6000602082019050818103600083015261148e816111e4565b9050919050565b600060208201905081810360008301526114ae81611224565b9050919050565b60006020820190506114ca60008301846112db565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600061152582611677565b915061153083611677565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611565576115646116ee565b5b828201905092915050565b600061157b82611677565b915061158683611677565b9250826115965761159561171d565b5b828204905092915050565b60006115ac82611677565b91506115b783611677565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115f0576115ef6116ee565b5b828202905092915050565b600061160682611677565b915061161183611677565b925082821015611624576116236116ee565b5b828203905092915050565b600061163a82611657565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061168c82611693565b9050919050565b600061169e82611657565b9050919050565b60006116b082611677565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116e3576116e26116ee565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6117558161162f565b811461176057600080fd5b50565b61176c81611641565b811461177757600080fd5b50565b6117838161164d565b811461178e57600080fd5b50565b61179a81611677565b81146117a557600080fd5b5056fea2646970667358221220abf267b5295c004459b76b67529e331d5f74bc3689fc6709245d4994f68599f664736f6c63430008000033";

type WorkerRegistrationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WorkerRegistrationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WorkerRegistration__factory extends ContractFactory {
  constructor(...args: WorkerRegistrationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _tSQT: PromiseOrValue<string>,
    _epochLengthBlocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WorkerRegistration> {
    return super.deploy(
      _tSQT,
      _epochLengthBlocks,
      overrides || {}
    ) as Promise<WorkerRegistration>;
  }
  override getDeployTransaction(
    _tSQT: PromiseOrValue<string>,
    _epochLengthBlocks: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _tSQT,
      _epochLengthBlocks,
      overrides || {}
    );
  }
  override attach(address: string): WorkerRegistration {
    return super.attach(address) as WorkerRegistration;
  }
  override connect(signer: Signer): WorkerRegistration__factory {
    return super.connect(signer) as WorkerRegistration__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WorkerRegistrationInterface {
    return new utils.Interface(_abi) as WorkerRegistrationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WorkerRegistration {
    return new Contract(address, _abi, signerOrProvider) as WorkerRegistration;
  }
}
